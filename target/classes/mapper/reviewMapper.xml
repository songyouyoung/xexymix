<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.xexymix.app.dao.reviewMapper">
    <!--//////////////////////////////////////////////////////-->
    <!--///////////////////// 상세페이지 //////////////////////-->
    <!--/////////////////////////////////////////////////////-->
    <!-- 전체 리뷰 개수-->
    <select id="selectRevCnt" parameterType="String" resultType="int">
        select count(revNo)
            from review
                where itemNo = #{itemNo}
    </select>
    <!-- 리뷰 리스트 조회 -->
    <select id="selectRev" parameterType="String" resultType="reviewDto">
        select r.revNo, r.userNo, r.userName, r.revScore, r.revTxt, r.revRegDate, r.revLike, r.revFile, r.revFileOri, r.itemNo, i.itemName, i.itemImg
            from review r, item i
                where r.itemNo = i.itemNo
                    AND r.itemNo = #{itemNo}
        <choose>
            <when test="search == 'new'">
                order by revRegDate desc
            </when>
            <when test="search == 'best'">
                order by revLike desc, revRegDate desc
            </when>
            <when test="search == 'likeDesc'">
                order by revScore desc, revRegDate desc
            </when>
            <when test="search == 'likeAsc'">
                order by revScore, revRegDate desc
            </when>
        </choose>
        limit ${limit}, 5
    </select>
    <!-- 베스트 리뷰 조회 -->
    <select id="selectRevBest" parameterType="String" resultType="reviewDto">
        select revNo, userNo, userName, revScore, revTxt, revRegDate, revLike, revFile
            from review
                where itemNo = #{itemNo} and revFile is not null
        order by revLike desc
        limit 0, 4
    </select>
    <!-- 별점 순 리뷰 갯수 조회 -->
    <select id="selectRevScore" parameterType="String" resultType="int">
        select count(revNo)
            from review
                where itemNo = #{itemNo} and revScore = ${revScore}
    </select>
    <!-- 리뷰 수정 -->
    <update id="updateRev" parameterType="String">
        update review
            set revTxt = #{revTxt}, revFile = #{revFile}, revFileOri = #{revFileOri}, revScore = #{revScore}, revUpDate = now()
                where revNo = ${revNo}
    </update>

<!--//////////////////////////////////////////////////////-->
<!--///////////////////// 마이페이지 //////////////////////-->
<!--/////////////////////////////////////////////////////-->
    <!-- 구매한 리뷰 조회 -->
    <select id="selectBuyRev" parameterType="int" resultType="reviewDto">
        select r.revNo, r.userNo, r.userName, r.revScore, r.revTxt, r.revRegDate, r.revLike, r.revFile, r.revFileOri, r.itemNo, i.itemName, i.itemImg
            from review r, item i
                where r.itemNo = i.itemNo
                    AND r.buyAuto = #{buyAuto}
    </select>

<!--//////////////////////////////////////////////////////-->
<!--///////////////////// 리뷰 작성 //////////////////////-->
<!--/////////////////////////////////////////////////////-->
    <!-- 리뷰 작성 -->
    <insert id="insertRev" parameterType="reviewDto">
        insert into review (userNo, itemNo, buyAuto, userName, revScore, revTxt, revFile, revFileOri)
            values( #{userNo}, #{itemNo}, #{buyAuto}, #{userName}, #{revScore}, #{revTxt}, #{revFile}, #{revFileOri})
    </insert>
    <!-- 작성한 리뷰 번호 가져오기 -->
    <select id="selectBuyRevNo" parameterType="int" resultType="int">
        select revNo from review where buyAuto = #{buyAuto}
    </select>
    <!-- buy테이블 revNo update -->
    <update id="updateBuyRev" parameterType="int">
        update buy
            set revNo = #{revNo}
                where buyAuto = #{buyAuto}
    </update>
<!--    &lt;!&ndash; 적립한 buy 번호 가져오기 &ndash;&gt;-->
<!--    <select id="selectRevBuyNo" parameterType="int" resultType="long">-->
<!--        select buyNo from buy where buyAuto = #{buyAuto}-->
<!--    </select>-->
</mapper>